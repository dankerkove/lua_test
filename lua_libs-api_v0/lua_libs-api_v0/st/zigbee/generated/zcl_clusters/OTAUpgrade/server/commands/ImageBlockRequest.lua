local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
--- @type FieldControl
--- @alias FieldControlType
local FieldControlType = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.types.FieldControl"
--- @type ImageTypeId
--- @alias ImageTypeIdType
local ImageTypeIdType = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.types.ImageTypeId"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- OTAUpgrade command ImageBlockRequest
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.OTAUpgrade.ImageBlockRequest
--- @alias ImageBlockRequest
---
--- @field public ID number 0x03 the ID of this command
--- @field public NAME string "ImageBlockRequest" the name of this command
--- @field public field_control st.zigbee.zcl.clusters.OTAUpgrade.FieldControl
--- @field public manufacturer_code Uint16
--- @field public image_type st.zigbee.zcl.clusters.OTAUpgrade.types.ImageTypeId
--- @field public file_version Uint32
--- @field public file_offset Uint32
--- @field public maximum_data_size Uint8
--- @field public request_node_address IeeeAddress
--- @field public minimum_block_period Uint16
local ImageBlockRequest = {}
ImageBlockRequest.NAME = "ImageBlockRequest"
ImageBlockRequest.ID = 0x03
ImageBlockRequest.args_def = {
  {
    name = "field_control",
    optional = false,
    data_type = FieldControlType,
    is_complex = false,
  },
  {
    name = "manufacturer_code",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    default = 0x0000,
  },
  {
    name = "image_type",
    optional = false,
    data_type = ImageTypeIdType,
    is_complex = false,
    default = 0x0000,
  },
  {
    name = "file_version",
    optional = false,
    data_type = data_types.Uint32,
    is_complex = false,
    default = 0x00000000,
  },
  {
    name = "file_offset",
    optional = false,
    data_type = data_types.Uint32,
    is_complex = false,
    default = 0x00000000,
  },
  {
    name = "maximum_data_size",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    default = 0x00,
  },
  {
    name = "request_node_address",
    optional = false,
    data_type = data_types.IeeeAddress,
    is_complex = false,
  },
  {
    name = "minimum_block_period",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    default = 0x0000,
  },
}

function ImageBlockRequest:get_fields()
  local fields = {}
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      fields[#fields + 1] = self[v.name]
    end
  end
  return fields
end

ImageBlockRequest.get_length = utils.length_from_fields
ImageBlockRequest.serialize = utils.serialize_from_fields
ImageBlockRequest.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return ImageBlockRequest
function ImageBlockRequest.deserialize(buf)
  local out = {}
  for _, v in ipairs(ImageBlockRequest.args_def) do
    if not v.optional or buf:remain() > 0 then
      out[v.name] = v.data_type.deserialize(buf)
    end
  end
  setmetatable(out, {__index = ImageBlockRequest})
  out:set_field_names()
  return out
end

function ImageBlockRequest:set_field_names()
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      self[v.name].field_name = v.name
    end
  end
end

--- Build a version of this message as if it came from the device
---
--- @param device ZigbeeDevice the device to build the message from
--- @param field_control st.zigbee.zcl.clusters.OTAUpgrade.FieldControl
--- @param manufacturer_code Uint16
--- @param image_type st.zigbee.zcl.clusters.OTAUpgrade.types.ImageTypeId
--- @param file_version Uint32
--- @param file_offset Uint32
--- @param maximum_data_size Uint8
--- @param request_node_address IeeeAddress
--- @param minimum_block_period Uint16
--- @return ZigbeeMessageRx The full Zigbee message containing this command body
function ImageBlockRequest.build_test_rx(device, field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period)
  local out = {}
  local args = {field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period}
  for i,v in ipairs(ImageBlockRequest.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {__index = ImageBlockRequest})
  out:set_field_names()
  return ImageBlockRequest._cluster:build_test_rx_cluster_specific_command(device, out, "server")
end

--- Initialize the ImageBlockRequest command
---
--- @param self ImageBlockRequest the template class for this command
--- @param device ZigbeeDevice the device to build this message to
--- @param field_control st.zigbee.zcl.clusters.OTAUpgrade.FieldControl
--- @param manufacturer_code Uint16
--- @param image_type st.zigbee.zcl.clusters.OTAUpgrade.types.ImageTypeId
--- @param file_version Uint32
--- @param file_offset Uint32
--- @param maximum_data_size Uint8
--- @param request_node_address IeeeAddress
--- @param minimum_block_period Uint16
--- @return ZigbeeMessageTx the full command addressed to the device
function ImageBlockRequest:init(device, field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period)
  local out = {}
  local args = {field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period}
  if #args > #self.args_def then
    error(self.NAME .. " received too many arguments")
  end
  for i,v in ipairs(self.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {
    __index = ImageBlockRequest,
    __tostring = ImageBlockRequest.pretty_print
  })
  out:set_field_names()
  return self._cluster:build_cluster_specific_command(device, out, "server")
end

function ImageBlockRequest:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(ImageBlockRequest, {__call = ImageBlockRequest.init})

return ImageBlockRequest
