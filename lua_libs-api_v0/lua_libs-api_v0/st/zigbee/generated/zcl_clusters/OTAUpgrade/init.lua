local cluster_base = require "st.zigbee.cluster_base"
local OTAUpgradeClientAttributes = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.client.attributes" 
local OTAUpgradeServerAttributes = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.server.attributes" 
local OTAUpgradeClientCommands = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.client.commands"
local OTAUpgradeServerCommands = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.server.commands"
local OTAUpgradeTypes = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.types"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.OTAUpgrade
--- @alias OTAUpgrade
---
--- @field public ID number 0x0019 the ID of this cluster
--- @field public NAME string "OTAUpgrade" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.OTAUpgradeServerAttributes | st.zigbee.zcl.clusters.OTAUpgradeClientAttributes
--- @field public commands st.zigbee.zcl.clusters.OTAUpgradeServerCommands | st.zigbee.zcl.clusters.OTAUpgradeClientCommands
--- @field public types st.zigbee.zcl.clusters.OTAUpgradeTypes
local OTAUpgrade = {}

OTAUpgrade.ID = 0x0019
OTAUpgrade.NAME = "OTAUpgrade"
OTAUpgrade.server = {}
OTAUpgrade.client = {}
OTAUpgrade.server.attributes = OTAUpgradeServerAttributes:set_parent_cluster(OTAUpgrade) 
OTAUpgrade.client.attributes = OTAUpgradeClientAttributes:set_parent_cluster(OTAUpgrade) 
OTAUpgrade.server.commands = OTAUpgradeServerCommands:set_parent_cluster(OTAUpgrade)
OTAUpgrade.client.commands = OTAUpgradeClientCommands:set_parent_cluster(OTAUpgrade)
OTAUpgrade.types = OTAUpgradeTypes

--- Find an attribute by id
---
--- @param command_id number
function OTAUpgrade:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "UpgradeServerID",
    [0x0001] = "FileOffset",
    [0x0002] = "CurrentFileVersion",
    [0x0003] = "CurrentZigBeeStackVersion",
    [0x0004] = "DownloadedFileVersion",
    [0x0005] = "DownloadedZigBeeStackVersion",
    [0x0006] = "ImageUpgradeStatus",
    [0x0007] = "ManufacturerID",
    [0x0008] = "ImageTypeID",
    [0x0009] = "MinimumBlockPeriod",
    [0x000A] = "ImageStamp",
    [0x000B] = "UpgradeActivationPolicy",
    [0x000C] = "UpgradeTimeoutPolicy",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function OTAUpgrade:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x01] = "QueryNextImageRequest",
    [0x03] = "ImageBlockRequest",
    [0x04] = "ImagePageRequest",
    [0x06] = "UpgradeEndRequest",
    [0x08] = "QueryDeviceSpecificFileRequest",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function OTAUpgrade:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x00] = "ImageNotify",
    [0x02] = "QueryNextImageResponse",
    [0x05] = "ImageBlockResponse",
    [0x07] = "UpgradeEndResponse",
    [0x09] = "QueryDeviceSpecificFileResponse",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

OTAUpgrade.attribute_direction_map = {
  ["UpgradeServerID"] = "client",
  ["FileOffset"] = "client",
  ["CurrentFileVersion"] = "client",
  ["CurrentZigBeeStackVersion"] = "client",
  ["DownloadedFileVersion"] = "client",
  ["DownloadedZigBeeStackVersion"] = "client",
  ["ImageUpgradeStatus"] = "client",
  ["ManufacturerID"] = "client",
  ["ImageTypeID"] = "client",
  ["MinimumBlockPeriod"] = "client",
  ["ImageStamp"] = "client",
  ["UpgradeActivationPolicy"] = "client",
  ["UpgradeTimeoutPolicy"] = "client",
}
OTAUpgrade.command_direction_map = {
  ["ImageNotify"] = "client",
  ["QueryNextImageResponse"] = "client",
  ["ImageBlockResponse"] = "client",
  ["UpgradeEndResponse"] = "client",
  ["QueryDeviceSpecificFileResponse"] = "client",
  ["QueryNextImageRequest"] = "server",
  ["ImageBlockRequest"] = "server",
  ["ImagePageRequest"] = "server",
  ["UpgradeEndRequest"] = "server",
  ["QueryDeviceSpecificFileRequest"] = "server",
}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = OTAUpgrade.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, OTAUpgrade.NAME))
  end
  return OTAUpgrade[direction].attributes[key] 
end
OTAUpgrade.attributes = {}
setmetatable(OTAUpgrade.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = OTAUpgrade.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, OTAUpgrade.NAME))
  end
  return OTAUpgrade[direction].commands[key] 
end
OTAUpgrade.commands = {}
setmetatable(OTAUpgrade.commands, command_helper_mt)

setmetatable(OTAUpgrade, {__index = cluster_base})

return OTAUpgrade
