local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"


-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.PumpConfigurationAndControl.types.PumpOperationMode
--- @alias PumpOperationMode 
--- @field public NAME PumpOperationMode
local PumpOperationMode = {}
PumpOperationMode.NAME = "PumpOperationMode"
PumpOperationMode.get_fields = function(self)
  local out = {}
  return out
end
PumpOperationMode.set_field_names = function(self)
end

--- @function PumpOperationMode:get_length
--- @return number the length in bytes of this frame
PumpOperationMode.get_length = utils.length_from_fields

--- @function PumpOperationMode:serialize
--- @return string this class serialized to bytes
PumpOperationMode.serialize = utils.serialize_from_fields

--- @function PumpOperationMode:pretty_print
--- @return string this class in a human readable format
PumpOperationMode.pretty_print = utils.print_from_fields

--- @function PumpOperationMode.deserialize
--- @param buf Reader the buf to parse this class from
--- @return number the length in bytes of this frame
PumpOperationMode.deserialize = function(buf)
  local o = {}
  setmetatable(o, {
    __index = PumpOperationMode,
    __tostring = PumpOperationMode.pretty_print,
  })
  o:set_field_names()
  return o
end

--- @function PumpOperationMode.from_values
PumpOperationMode.from_values = function(orig)
  local o = {}
  setmetatable(o, {
    __index = orig,
    __tostring = orig.pretty_print
  })
  o:set_field_names()
  return o
end

setmetatable(PumpOperationMode, {__call = PumpOperationMode.from_values})
return PumpOperationMode
