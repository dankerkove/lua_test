local cluster_base = require "st.zigbee.cluster_base"
local data_types = require "st.zigbee.data_types"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.PowerConfiguration.MainsAlarmMask
--- @alias MainsAlarmMask
---
--- @field public ID number 0x0010 the ID of this attribute
--- @field public NAME string "MainsAlarmMask" the name of this attribute
--- @field public data_type Bitmap8 the data type of this attribute
--- @field public MAINS_VOLTAGE_TOO_LOW number 1
--- @field public MAINS_VOLTAGE_TOO_HIGH number 2
--- @field public MAINS_POWER_SUPPLY_LOST number 4
local MainsAlarmMask = {
  ID = 0x0010,
  NAME = "MainsAlarmMask",
  base_type = data_types.Bitmap8,
}

MainsAlarmMask.BASE_MASK               = 0xFF
MainsAlarmMask.MAINS_VOLTAGE_TOO_LOW   = 0x01
MainsAlarmMask.MAINS_VOLTAGE_TOO_HIGH  = 0x02
MainsAlarmMask.MAINS_POWER_SUPPLY_LOST = 0x04


MainsAlarmMask.mask_fields = {
  BASE_MASK = 0xFF,
  MAINS_VOLTAGE_TOO_LOW = 0x01,
  MAINS_VOLTAGE_TOO_HIGH = 0x02,
  MAINS_POWER_SUPPLY_LOST = 0x04,
}


--- @function MainsAlarmMask:is_mains_voltage_too_low_set
--- @return boolean True if the value of MAINS_VOLTAGE_TOO_LOW is non-zero
MainsAlarmMask.is_mains_voltage_too_low_set = function(self)
  return (self.value & self.MAINS_VOLTAGE_TOO_LOW) ~= 0
end
 
--- @function MainsAlarmMask:set_mains_voltage_too_low
--- Set the value of the bit in the MAINS_VOLTAGE_TOO_LOW field to 1
MainsAlarmMask.set_mains_voltage_too_low = function(self)
  self.value = self.value | self.MAINS_VOLTAGE_TOO_LOW
end

--- @function MainsAlarmMask:unset_mains_voltage_too_low
--- Set the value of the bits in the MAINS_VOLTAGE_TOO_LOW field to 0
MainsAlarmMask.unset_mains_voltage_too_low = function(self)
  self.value = self.value & (~self.MAINS_VOLTAGE_TOO_LOW & self.BASE_MASK)
end

--- @function MainsAlarmMask:is_mains_voltage_too_high_set
--- @return boolean True if the value of MAINS_VOLTAGE_TOO_HIGH is non-zero
MainsAlarmMask.is_mains_voltage_too_high_set = function(self)
  return (self.value & self.MAINS_VOLTAGE_TOO_HIGH) ~= 0
end
 
--- @function MainsAlarmMask:set_mains_voltage_too_high
--- Set the value of the bit in the MAINS_VOLTAGE_TOO_HIGH field to 1
MainsAlarmMask.set_mains_voltage_too_high = function(self)
  self.value = self.value | self.MAINS_VOLTAGE_TOO_HIGH
end

--- @function MainsAlarmMask:unset_mains_voltage_too_high
--- Set the value of the bits in the MAINS_VOLTAGE_TOO_HIGH field to 0
MainsAlarmMask.unset_mains_voltage_too_high = function(self)
  self.value = self.value & (~self.MAINS_VOLTAGE_TOO_HIGH & self.BASE_MASK)
end

--- @function MainsAlarmMask:is_mains_power_supply_lost_set
--- @return boolean True if the value of MAINS_POWER_SUPPLY_LOST is non-zero
MainsAlarmMask.is_mains_power_supply_lost_set = function(self)
  return (self.value & self.MAINS_POWER_SUPPLY_LOST) ~= 0
end
 
--- @function MainsAlarmMask:set_mains_power_supply_lost
--- Set the value of the bit in the MAINS_POWER_SUPPLY_LOST field to 1
MainsAlarmMask.set_mains_power_supply_lost = function(self)
  self.value = self.value | self.MAINS_POWER_SUPPLY_LOST
end

--- @function MainsAlarmMask:unset_mains_power_supply_lost
--- Set the value of the bits in the MAINS_POWER_SUPPLY_LOST field to 0
MainsAlarmMask.unset_mains_power_supply_lost = function(self)
  self.value = self.value & (~self.MAINS_POWER_SUPPLY_LOST & self.BASE_MASK)
end


MainsAlarmMask.mask_methods = {
  is_mains_voltage_too_low_set = MainsAlarmMask.is_mains_voltage_too_low_set,
  set_mains_voltage_too_low = MainsAlarmMask.set_mains_voltage_too_low,
  unset_mains_voltage_too_low = MainsAlarmMask.unset_mains_voltage_too_low,
  is_mains_voltage_too_high_set = MainsAlarmMask.is_mains_voltage_too_high_set,
  set_mains_voltage_too_high = MainsAlarmMask.set_mains_voltage_too_high,
  unset_mains_voltage_too_high = MainsAlarmMask.unset_mains_voltage_too_high,
  is_mains_power_supply_lost_set = MainsAlarmMask.is_mains_power_supply_lost_set,
  set_mains_power_supply_lost = MainsAlarmMask.set_mains_power_supply_lost,
  unset_mains_power_supply_lost = MainsAlarmMask.unset_mains_power_supply_lost,
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj Bitmap8 the base data type object to add functionality to
function MainsAlarmMask:augment_type(base_type_obj)
  for k, v in pairs(self.mask_fields) do
    base_type_obj[k] = v
  end
  for k, v in pairs(self.mask_methods) do
    base_type_obj[k] = v
  end
  
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function MainsAlarmMask.pretty_print(value_obj)
  local zb_utils = require "st.zigbee.utils" 
  local pattern = ">I" .. value_obj.byte_length
  return string.format("%s: %s[0x]", value_obj.field_name or value_obj.NAME, MainsAlarmMask.NAME, zb_utils.pretty_print_hex_str(string.pack(pattern, value_obj.value)))
end

--- @function MainsAlarmMask:build_test_attr_report
---
--- Build a Rx Zigbee message as if a device reported this attribute
--- @param device ZigbeeDevice
--- @param data Bitmap8 the attribute value
--- @return ZigbeeMessageRx containing an AttributeReport body
MainsAlarmMask.build_test_attr_report = cluster_base.build_test_attr_report

--- @function MainsAlarmMask:build_test_read_attr_response
---
--- Build a Rx Zigbee message as if a device sent a read response for this attribute
--- @param device ZigbeeDevice
--- @param data Bitmap8 the attribute value
--- @return ZigbeeMessageRx containing an ReadAttributeResponse body
MainsAlarmMask.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a Bitmap8 object of this attribute with any additional features provided for the attribute
---
--- This is also usable with the MainsAlarmMask(...) syntax
---
--- @param ... vararg the values needed to construct a Bitmap8
--- @return Bitmap8
function MainsAlarmMask:new_value(...)
    local o = self.base_type(table.unpack({...}))
    self:augment_type(o)
    return o
end

--- Construct a ZigbeeMessageTx to read this attribute from a device
---
--- @param device ZigbeeDevice
--- @return ZigbeeMessageTx containing a ReadAttribute body
function MainsAlarmMask:read(device)
    return cluster_base.read_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID))
end

--- Construct a ZigbeeMessageTx to configure this attribute for reporting on a device
---
--- @param device ZigbeeDevice
--- @param min_rep_int number|Uint16 the minimum interval allowed between reports of this attribute
--- @param max_rep_int number|Uint16 the maximum interval allowed between reports of this attribute
--- @return ZigbeeMessageTx containing a ConfigureReporting body
function MainsAlarmMask:configure_reporting(device, min_rep_int, max_rep_int)
  local min = data_types.validate_or_build_type(min_rep_int, data_types.Uint16, "minimum_reporting_interval")
  local max = data_types.validate_or_build_type(max_rep_int, data_types.Uint16, "maximum_reporting_interval")
  local rep_change = nil
  return cluster_base.configure_reporting(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data_types.ZigbeeDataType(self.base_type.ID), min, max, rep_change)
end

--- Write a value to this attribute on a device
---
--- @param device ZigbeeDevice
--- @param value Bitmap8 the value to write
function MainsAlarmMask:write(device, value)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.write_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data)
end

function MainsAlarmMask:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(MainsAlarmMask, {__call = MainsAlarmMask.new_value})
return MainsAlarmMask
