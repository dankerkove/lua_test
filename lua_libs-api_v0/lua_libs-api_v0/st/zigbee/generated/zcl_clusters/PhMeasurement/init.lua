local cluster_base = require "st.zigbee.cluster_base"
local PhMeasurementClientAttributes = require "st.zigbee.generated.zcl_clusters.PhMeasurement.client.attributes" 
local PhMeasurementServerAttributes = require "st.zigbee.generated.zcl_clusters.PhMeasurement.server.attributes" 
local PhMeasurementClientCommands = require "st.zigbee.generated.zcl_clusters.PhMeasurement.client.commands"
local PhMeasurementServerCommands = require "st.zigbee.generated.zcl_clusters.PhMeasurement.server.commands"
local PhMeasurementTypes = require "st.zigbee.generated.zcl_clusters.PhMeasurement.types"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.PhMeasurement
--- @alias PhMeasurement
---
--- @field public ID number 0x0409 the ID of this cluster
--- @field public NAME string "PhMeasurement" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.PhMeasurementServerAttributes | st.zigbee.zcl.clusters.PhMeasurementClientAttributes
--- @field public commands st.zigbee.zcl.clusters.PhMeasurementServerCommands | st.zigbee.zcl.clusters.PhMeasurementClientCommands
--- @field public types st.zigbee.zcl.clusters.PhMeasurementTypes
local PhMeasurement = {}

PhMeasurement.ID = 0x0409
PhMeasurement.NAME = "PhMeasurement"
PhMeasurement.server = {}
PhMeasurement.client = {}
PhMeasurement.server.attributes = PhMeasurementServerAttributes:set_parent_cluster(PhMeasurement) 
PhMeasurement.client.attributes = PhMeasurementClientAttributes:set_parent_cluster(PhMeasurement) 
PhMeasurement.server.commands = PhMeasurementServerCommands:set_parent_cluster(PhMeasurement)
PhMeasurement.client.commands = PhMeasurementClientCommands:set_parent_cluster(PhMeasurement)
PhMeasurement.types = PhMeasurementTypes

--- Find an attribute by id
---
--- @param command_id number
function PhMeasurement:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "MeasuredValue",
    [0x0001] = "MinMeasuredValue",
    [0x0002] = "MaxMeasuredValue",
    [0x0003] = "Tolerance",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function PhMeasurement:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function PhMeasurement:get_client_command_by_id(command_id)
  local client_id_map = {
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

PhMeasurement.attribute_direction_map = {
  ["MeasuredValue"] = "server",
  ["MinMeasuredValue"] = "server",
  ["MaxMeasuredValue"] = "server",
  ["Tolerance"] = "server",
}
PhMeasurement.command_direction_map = {}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = PhMeasurement.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, PhMeasurement.NAME))
  end
  return PhMeasurement[direction].attributes[key] 
end
PhMeasurement.attributes = {}
setmetatable(PhMeasurement.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = PhMeasurement.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, PhMeasurement.NAME))
  end
  return PhMeasurement[direction].commands[key] 
end
PhMeasurement.commands = {}
setmetatable(PhMeasurement.commands, command_helper_mt)

setmetatable(PhMeasurement, {__index = cluster_base})

return PhMeasurement
