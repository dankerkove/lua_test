local cluster_base = require "st.zigbee.cluster_base"
local FanControlClientAttributes = require "st.zigbee.generated.zcl_clusters.FanControl.client.attributes" 
local FanControlServerAttributes = require "st.zigbee.generated.zcl_clusters.FanControl.server.attributes" 
local FanControlClientCommands = require "st.zigbee.generated.zcl_clusters.FanControl.client.commands"
local FanControlServerCommands = require "st.zigbee.generated.zcl_clusters.FanControl.server.commands"
local FanControlTypes = require "st.zigbee.generated.zcl_clusters.FanControl.types"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.FanControl
--- @alias FanControl
---
--- @field public ID number 0x0202 the ID of this cluster
--- @field public NAME string "FanControl" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.FanControlServerAttributes | st.zigbee.zcl.clusters.FanControlClientAttributes
--- @field public commands st.zigbee.zcl.clusters.FanControlServerCommands | st.zigbee.zcl.clusters.FanControlClientCommands
--- @field public types st.zigbee.zcl.clusters.FanControlTypes
local FanControl = {}

FanControl.ID = 0x0202
FanControl.NAME = "FanControl"
FanControl.server = {}
FanControl.client = {}
FanControl.server.attributes = FanControlServerAttributes:set_parent_cluster(FanControl) 
FanControl.client.attributes = FanControlClientAttributes:set_parent_cluster(FanControl) 
FanControl.server.commands = FanControlServerCommands:set_parent_cluster(FanControl)
FanControl.client.commands = FanControlClientCommands:set_parent_cluster(FanControl)
FanControl.types = FanControlTypes

--- Find an attribute by id
---
--- @param command_id number
function FanControl:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "FanMode",
    [0x0001] = "FanModeSequence",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function FanControl:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function FanControl:get_client_command_by_id(command_id)
  local client_id_map = {
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

FanControl.attribute_direction_map = {
  ["FanMode"] = "server",
  ["FanModeSequence"] = "server",
}
FanControl.command_direction_map = {}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = FanControl.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, FanControl.NAME))
  end
  return FanControl[direction].attributes[key] 
end
FanControl.attributes = {}
setmetatable(FanControl.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = FanControl.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, FanControl.NAME))
  end
  return FanControl[direction].commands[key] 
end
FanControl.commands = {}
setmetatable(FanControl.commands, command_helper_mt)

setmetatable(FanControl, {__index = cluster_base})

return FanControl
