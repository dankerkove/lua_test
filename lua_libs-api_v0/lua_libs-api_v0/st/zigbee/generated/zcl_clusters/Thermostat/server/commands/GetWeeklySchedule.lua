local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
--- @type ScheduleMode
--- @alias ScheduleModeType
local ScheduleModeType = require "st.zigbee.generated.zcl_clusters.Thermostat.types.ScheduleMode"
--- @type DayOfWeek
--- @alias DayOfWeekType
local DayOfWeekType = require "st.zigbee.generated.zcl_clusters.Thermostat.types.DayOfWeek"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- Thermostat command GetWeeklySchedule
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.Thermostat.GetWeeklySchedule
--- @alias GetWeeklySchedule
---
--- @field public ID number 0x02 the ID of this command
--- @field public NAME string "GetWeeklySchedule" the name of this command
--- @field public days_to_return st.zigbee.zcl.clusters.Thermostat.types.DayOfWeek
--- @field public mode_to_return st.zigbee.zcl.clusters.Thermostat.types.ScheduleMode
local GetWeeklySchedule = {}
GetWeeklySchedule.NAME = "GetWeeklySchedule"
GetWeeklySchedule.ID = 0x02
GetWeeklySchedule.args_def = {
  {
    name = "days_to_return",
    optional = false,
    data_type = DayOfWeekType,
    is_complex = false,
    default = 0x00,
  },
  {
    name = "mode_to_return",
    optional = false,
    data_type = ScheduleModeType,
    is_complex = false,
    default = 0x00,
  },
}

function GetWeeklySchedule:get_fields()
  local fields = {}
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      fields[#fields + 1] = self[v.name]
    end
  end
  return fields
end

GetWeeklySchedule.get_length = utils.length_from_fields
GetWeeklySchedule.serialize = utils.serialize_from_fields
GetWeeklySchedule.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return GetWeeklySchedule
function GetWeeklySchedule.deserialize(buf)
  local out = {}
  for _, v in ipairs(GetWeeklySchedule.args_def) do
    if not v.optional or buf:remain() > 0 then
      out[v.name] = v.data_type.deserialize(buf)
    end
  end
  setmetatable(out, {__index = GetWeeklySchedule})
  out:set_field_names()
  return out
end

function GetWeeklySchedule:set_field_names()
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      self[v.name].field_name = v.name
    end
  end
end

--- Build a version of this message as if it came from the device
---
--- @param device ZigbeeDevice the device to build the message from
--- @param days_to_return st.zigbee.zcl.clusters.Thermostat.types.DayOfWeek
--- @param mode_to_return st.zigbee.zcl.clusters.Thermostat.types.ScheduleMode
--- @return ZigbeeMessageRx The full Zigbee message containing this command body
function GetWeeklySchedule.build_test_rx(device, days_to_return, mode_to_return)
  local out = {}
  local args = {days_to_return, mode_to_return}
  for i,v in ipairs(GetWeeklySchedule.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {__index = GetWeeklySchedule})
  out:set_field_names()
  return GetWeeklySchedule._cluster:build_test_rx_cluster_specific_command(device, out, "server")
end

--- Initialize the GetWeeklySchedule command
---
--- @param self GetWeeklySchedule the template class for this command
--- @param device ZigbeeDevice the device to build this message to
--- @param days_to_return st.zigbee.zcl.clusters.Thermostat.types.DayOfWeek
--- @param mode_to_return st.zigbee.zcl.clusters.Thermostat.types.ScheduleMode
--- @return ZigbeeMessageTx the full command addressed to the device
function GetWeeklySchedule:init(device, days_to_return, mode_to_return)
  local out = {}
  local args = {days_to_return, mode_to_return}
  if #args > #self.args_def then
    error(self.NAME .. " received too many arguments")
  end
  for i,v in ipairs(self.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {
    __index = GetWeeklySchedule,
    __tostring = GetWeeklySchedule.pretty_print
  })
  out:set_field_names()
  return self._cluster:build_cluster_specific_command(device, out, "server")
end

function GetWeeklySchedule:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(GetWeeklySchedule, {__call = GetWeeklySchedule.init})

return GetWeeklySchedule
