local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"


-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.Thermostat.types.TransitionType
--- @alias TransitionType 
--- @field public NAME TransitionType
--- @field public transition_time Uint16
--- @field public heat_set_point Int16
--- @field public cool_set_point Int16
local TransitionType = {}
TransitionType.NAME = "TransitionType"
TransitionType.get_fields = function(self)
  local out = {}
  out[#out + 1] = self.transition_time
  if self.heat_set_point ~= nil then
    out[#out + 1] = self.heat_set_point
  end
  if self.cool_set_point ~= nil then
    out[#out + 1] = self.cool_set_point
  end
  return out
end
TransitionType.set_field_names = function(self)
  self.transition_time.field_name = "transition_time"
  if self.heat_set_point ~= nil then
    self.heat_set_point.field_name = "heat_set_point"
  end
  if self.cool_set_point ~= nil then
    self.cool_set_point.field_name = "cool_set_point"
  end
end

--- @function TransitionType:get_length
--- @return number the length in bytes of this frame
TransitionType.get_length = utils.length_from_fields

--- @function TransitionType:serialize
--- @return string this class serialized to bytes
TransitionType.serialize = utils.serialize_from_fields

--- @function TransitionType:pretty_print
--- @return string this class in a human readable format
TransitionType.pretty_print = utils.print_from_fields

--- @function TransitionType.deserialize
--- @param buf Reader the buf to parse this class from
--- @return number the length in bytes of this frame
TransitionType.deserialize = function(buf)
  local o = {}
  o.transition_time = data_types.Uint16.deserialize(buf)
  o.heat_set_point = nil
  if buf:remain() > 0 then
    o.heat_set_point = data_types.Int16.deserialize(buf)
  end
  o.cool_set_point = nil
  if buf:remain() > 0 then
    o.cool_set_point = data_types.Int16.deserialize(buf)
  end
  setmetatable(o, {
    __index = TransitionType,
    __tostring = TransitionType.pretty_print,
  })
  o:set_field_names()
  return o
end

--- @function TransitionType.from_values
--- @param transition_time Uint16
--- @param heat_set_point Int16
--- @param cool_set_point Int16
TransitionType.from_values = function(orig, transition_time, heat_set_point, cool_set_point)
  local o = {}
    o.transition_time = data_types.Uint16(transition_time)
    if heat_set_point ~= nil then
      o.heat_set_point = data_types.Int16(heat_set_point)
    end
    if cool_set_point ~= nil then
      o.cool_set_point = data_types.Int16(cool_set_point)
    end
  setmetatable(o, {
    __index = orig,
    __tostring = orig.pretty_print
  })
  o:set_field_names()
  return o
end

setmetatable(TransitionType, {__call = TransitionType.from_values})
return TransitionType
