local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
--- @type ProgramEventSource
--- @alias ProgramEventSourceType
local ProgramEventSourceType = require "st.zigbee.generated.zcl_clusters.DoorLock.types.ProgramEventSource"
--- @type DrlkUserType
--- @alias DrlkUserTypeType
local DrlkUserTypeType = require "st.zigbee.generated.zcl_clusters.DoorLock.types.DrlkUserType"
--- @type ProgramEventCode
--- @alias ProgramEventCodeType
local ProgramEventCodeType = require "st.zigbee.generated.zcl_clusters.DoorLock.types.ProgramEventCode"
--- @type DrlkUserStatus
--- @alias DrlkUserStatusType
local DrlkUserStatusType = require "st.zigbee.generated.zcl_clusters.DoorLock.types.DrlkUserStatus"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- DoorLock command ProgrammingEventNotification
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.DoorLock.ProgrammingEventNotification
--- @alias ProgrammingEventNotification
---
--- @field public ID number 0x21 the ID of this command
--- @field public NAME string "ProgrammingEventNotification" the name of this command
--- @field public program_event_source st.zigbee.zcl.clusters.DoorLock.ProgramEventSource
--- @field public program_event_code st.zigbee.zcl.clusters.DoorLock.ProgramEventCode
--- @field public user_id Uint16
--- @field public pin OctetString
--- @field public user_type st.zigbee.zcl.clusters.DoorLock.types.DrlkUserType
--- @field public user_status st.zigbee.zcl.clusters.DoorLock.types.DrlkUserStatus
--- @field public local_time Uint32
--- @field public data CharString
local ProgrammingEventNotification = {}
ProgrammingEventNotification.NAME = "ProgrammingEventNotification"
ProgrammingEventNotification.ID = 0x21
ProgrammingEventNotification.args_def = {
  {
    name = "program_event_source",
    optional = false,
    data_type = ProgramEventSourceType,
    is_complex = false,
  },
  {
    name = "program_event_code",
    optional = false,
    data_type = ProgramEventCodeType,
    is_complex = false,
  },
  {
    name = "user_id",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    default = 0x0000,
  },
  {
    name = "pin",
    optional = false,
    data_type = data_types.OctetString,
    is_complex = false,
    default = "",
  },
  {
    name = "user_type",
    optional = false,
    data_type = DrlkUserTypeType,
    is_complex = false,
    default = 0x00,
  },
  {
    name = "user_status",
    optional = false,
    data_type = DrlkUserStatusType,
    is_complex = false,
    default = 0x00,
  },
  {
    name = "local_time",
    optional = false,
    data_type = data_types.Uint32,
    is_complex = false,
    default = 0x00000000,
  },
  {
    name = "data",
    optional = false,
    data_type = data_types.CharString,
    is_complex = false,
    default = "",
  },
}

function ProgrammingEventNotification:get_fields()
  local fields = {}
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      fields[#fields + 1] = self[v.name]
    end
  end
  return fields
end

ProgrammingEventNotification.get_length = utils.length_from_fields
ProgrammingEventNotification.serialize = utils.serialize_from_fields
ProgrammingEventNotification.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return ProgrammingEventNotification
function ProgrammingEventNotification.deserialize(buf)
  local out = {}
  for _, v in ipairs(ProgrammingEventNotification.args_def) do
    if not v.optional or buf:remain() > 0 then
      out[v.name] = v.data_type.deserialize(buf)
    end
  end
  setmetatable(out, {__index = ProgrammingEventNotification})
  out:set_field_names()
  return out
end

function ProgrammingEventNotification:set_field_names()
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      self[v.name].field_name = v.name
    end
  end
end

--- Build a version of this message as if it came from the device
---
--- @param device ZigbeeDevice the device to build the message from
--- @param program_event_source st.zigbee.zcl.clusters.DoorLock.ProgramEventSource
--- @param program_event_code st.zigbee.zcl.clusters.DoorLock.ProgramEventCode
--- @param user_id Uint16
--- @param pin OctetString
--- @param user_type st.zigbee.zcl.clusters.DoorLock.types.DrlkUserType
--- @param user_status st.zigbee.zcl.clusters.DoorLock.types.DrlkUserStatus
--- @param local_time Uint32
--- @param data CharString
--- @return ZigbeeMessageRx The full Zigbee message containing this command body
function ProgrammingEventNotification.build_test_rx(device, program_event_source, program_event_code, user_id, pin, user_type, user_status, local_time, data)
  local out = {}
  local args = {program_event_source, program_event_code, user_id, pin, user_type, user_status, local_time, data}
  for i,v in ipairs(ProgrammingEventNotification.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {__index = ProgrammingEventNotification})
  out:set_field_names()
  return ProgrammingEventNotification._cluster:build_test_rx_cluster_specific_command(device, out, "client")
end

--- Initialize the ProgrammingEventNotification command
---
--- @param self ProgrammingEventNotification the template class for this command
--- @param device ZigbeeDevice the device to build this message to
--- @param program_event_source st.zigbee.zcl.clusters.DoorLock.ProgramEventSource
--- @param program_event_code st.zigbee.zcl.clusters.DoorLock.ProgramEventCode
--- @param user_id Uint16
--- @param pin OctetString
--- @param user_type st.zigbee.zcl.clusters.DoorLock.types.DrlkUserType
--- @param user_status st.zigbee.zcl.clusters.DoorLock.types.DrlkUserStatus
--- @param local_time Uint32
--- @param data CharString
--- @return ZigbeeMessageTx the full command addressed to the device
function ProgrammingEventNotification:init(device, program_event_source, program_event_code, user_id, pin, user_type, user_status, local_time, data)
  local out = {}
  local args = {program_event_source, program_event_code, user_id, pin, user_type, user_status, local_time, data}
  if #args > #self.args_def then
    error(self.NAME .. " received too many arguments")
  end
  for i,v in ipairs(self.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {
    __index = ProgrammingEventNotification,
    __tostring = ProgrammingEventNotification.pretty_print
  })
  out:set_field_names()
  return self._cluster:build_cluster_specific_command(device, out, "client")
end

function ProgrammingEventNotification:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(ProgrammingEventNotification, {__call = ProgrammingEventNotification.init})

return ProgrammingEventNotification
