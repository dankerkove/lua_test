local data_types = require "st.zigbee.data_types"
local BitmapABC = require "st.zigbee.data_types.base_defs.BitmapABC"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlZigbeeInformation : Bitmap8
--- @alias TlZigbeeInformation
---
--- @field public byte_length number 1
--- @field public LOGICAL_TYPE number 3
--- @field public RX_ON_WHEN_IDLE number 4
local TlZigbeeInformation = {}
local new_mt = BitmapABC.new_mt({NAME = "TlZigbeeInformation", ID = data_types.name_to_id_map["Bitmap8"]}, 1)
new_mt.__index.BASE_MASK       = 0xFF
new_mt.__index.LOGICAL_TYPE    = 0x03
new_mt.__index.RX_ON_WHEN_IDLE = 0x04

--- @function TlZigbeeInformation:is_logical_type_set
--- @return boolean True if the value of LOGICAL_TYPE is non-zero
new_mt.__index.is_logical_type_set = function(self)
  return (self.value & self.LOGICAL_TYPE) ~= 0
end
 
--- @function TlZigbeeInformation:set_logical_type
--- Set the value of the bits in the LOGICAL_TYPE field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_logical_type = function(self, fieldVal)
  if ((fieldVal & ~(self.LOGICAL_TYPE >> 0)) ~= 0) then
    error("value too large for LOGICAL_TYPE")
  end
  self.value = self.value | (fieldVal << 0)
end

--- @function TlZigbeeInformation:get_logical_type
--- Get the value of the bits in the LOGICAL_TYPE field
new_mt.__index.get_logical_type = function(self)
  return ((self.value & self.LOGICAL_TYPE)) >> 0
end

--- @function TlZigbeeInformation:unset_logical_type
--- Set the value of the bits in the LOGICAL_TYPE field to 0
new_mt.__index.unset_logical_type = function(self)
  self.value = self.value & (~self.LOGICAL_TYPE & self.BASE_MASK)
end

--- @function TlZigbeeInformation:is_rx_on_when_idle_set
--- @return boolean True if the value of RX_ON_WHEN_IDLE is non-zero
new_mt.__index.is_rx_on_when_idle_set = function(self)
  return (self.value & self.RX_ON_WHEN_IDLE) ~= 0
end
 
--- @function TlZigbeeInformation:set_rx_on_when_idle
--- Set the value of the bit in the RX_ON_WHEN_IDLE field to 1
new_mt.__index.set_rx_on_when_idle = function(self)
  self.value = self.value | self.RX_ON_WHEN_IDLE
end

--- @function TlZigbeeInformation:unset_rx_on_when_idle
--- Set the value of the bits in the RX_ON_WHEN_IDLE field to 0
new_mt.__index.unset_rx_on_when_idle = function(self)
  self.value = self.value & (~self.RX_ON_WHEN_IDLE & self.BASE_MASK)
end

setmetatable(TlZigbeeInformation, new_mt)
return TlZigbeeInformation
