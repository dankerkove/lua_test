local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"


-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlGroupInformationRecord
--- @alias TlGroupInformationRecord 
--- @field public NAME TlGroupInformationRecord
--- @field public group_identifier Uint16
--- @field public group_type Uint8
local TlGroupInformationRecord = {}
TlGroupInformationRecord.NAME = "TlGroupInformationRecord"
TlGroupInformationRecord.get_fields = function(self)
  local out = {}
  out[#out + 1] = self.group_identifier
  if self.group_type ~= nil then
    out[#out + 1] = self.group_type
  end
  return out
end
TlGroupInformationRecord.set_field_names = function(self)
  self.group_identifier.field_name = "group_identifier"
  if self.group_type ~= nil then
    self.group_type.field_name = "group_type"
  end
end

--- @function TlGroupInformationRecord:get_length
--- @return number the length in bytes of this frame
TlGroupInformationRecord.get_length = utils.length_from_fields

--- @function TlGroupInformationRecord:serialize
--- @return string this class serialized to bytes
TlGroupInformationRecord.serialize = utils.serialize_from_fields

--- @function TlGroupInformationRecord:pretty_print
--- @return string this class in a human readable format
TlGroupInformationRecord.pretty_print = utils.print_from_fields

--- @function TlGroupInformationRecord.deserialize
--- @param buf Reader the buf to parse this class from
--- @return number the length in bytes of this frame
TlGroupInformationRecord.deserialize = function(buf)
  local o = {}
  o.group_identifier = data_types.Uint16.deserialize(buf)
  o.group_type = nil
  if buf:remain() > 0 then
    o.group_type = data_types.Uint8.deserialize(buf)
  end
  setmetatable(o, {
    __index = TlGroupInformationRecord,
    __tostring = TlGroupInformationRecord.pretty_print,
  })
  o:set_field_names()
  return o
end

--- @function TlGroupInformationRecord.from_values
--- @param group_identifier Uint16
--- @param group_type Uint8
TlGroupInformationRecord.from_values = function(orig, group_identifier, group_type)
  local o = {}
    o.group_identifier = data_types.Uint16(group_identifier)
    if group_type ~= nil then
      o.group_type = data_types.Uint8(group_type)
    end
  setmetatable(o, {
    __index = orig,
    __tostring = orig.pretty_print
  })
  o:set_field_names()
  return o
end

setmetatable(TlGroupInformationRecord, {__call = TlGroupInformationRecord.from_values})
return TlGroupInformationRecord
