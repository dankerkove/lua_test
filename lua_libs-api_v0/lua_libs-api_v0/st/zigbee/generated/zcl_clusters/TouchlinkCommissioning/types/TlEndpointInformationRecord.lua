local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
local TlVersion = require "st.zigbee.generated.types.TlVersion"


-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlEndpointInformationRecord
--- @alias TlEndpointInformationRecord 
--- @field public NAME TlEndpointInformationRecord
--- @field public network_address Uint16
--- @field public endpoint_identifier Uint8
--- @field public profile_identifier Uint16
--- @field public device_identifier Uint16
--- @field public version TlVersion
local TlEndpointInformationRecord = {}
TlEndpointInformationRecord.NAME = "TlEndpointInformationRecord"
TlEndpointInformationRecord.get_fields = function(self)
  local out = {}
  out[#out + 1] = self.network_address
  if self.endpoint_identifier ~= nil then
    out[#out + 1] = self.endpoint_identifier
  end
  if self.profile_identifier ~= nil then
    out[#out + 1] = self.profile_identifier
  end
  if self.device_identifier ~= nil then
    out[#out + 1] = self.device_identifier
  end
  if self.version ~= nil then
    out[#out + 1] = self.version
  end
  return out
end
TlEndpointInformationRecord.set_field_names = function(self)
  self.network_address.field_name = "network_address"
  if self.endpoint_identifier ~= nil then
    self.endpoint_identifier.field_name = "endpoint_identifier"
  end
  if self.profile_identifier ~= nil then
    self.profile_identifier.field_name = "profile_identifier"
  end
  if self.device_identifier ~= nil then
    self.device_identifier.field_name = "device_identifier"
  end
  if self.version ~= nil then
    self.version.field_name = "version"
  end
end

--- @function TlEndpointInformationRecord:get_length
--- @return number the length in bytes of this frame
TlEndpointInformationRecord.get_length = utils.length_from_fields

--- @function TlEndpointInformationRecord:serialize
--- @return string this class serialized to bytes
TlEndpointInformationRecord.serialize = utils.serialize_from_fields

--- @function TlEndpointInformationRecord:pretty_print
--- @return string this class in a human readable format
TlEndpointInformationRecord.pretty_print = utils.print_from_fields

--- @function TlEndpointInformationRecord.deserialize
--- @param buf Reader the buf to parse this class from
--- @return number the length in bytes of this frame
TlEndpointInformationRecord.deserialize = function(buf)
  local o = {}
  o.network_address = data_types.Uint16.deserialize(buf)
  o.endpoint_identifier = nil
  if buf:remain() > 0 then
    o.endpoint_identifier = data_types.Uint8.deserialize(buf)
  end
  o.profile_identifier = nil
  if buf:remain() > 0 then
    o.profile_identifier = data_types.Uint16.deserialize(buf)
  end
  o.device_identifier = nil
  if buf:remain() > 0 then
    o.device_identifier = data_types.Uint16.deserialize(buf)
  end
  o.version = nil
  if buf:remain() > 0 then
    o.version = TlVersion.deserialize(buf)
  end
  setmetatable(o, {
    __index = TlEndpointInformationRecord,
    __tostring = TlEndpointInformationRecord.pretty_print,
  })
  o:set_field_names()
  return o
end

--- @function TlEndpointInformationRecord.from_values
--- @param network_address Uint16
--- @param endpoint_identifier Uint8
--- @param profile_identifier Uint16
--- @param device_identifier Uint16
--- @param version TlVersion
TlEndpointInformationRecord.from_values = function(orig, network_address, endpoint_identifier, profile_identifier, device_identifier, version)
  local o = {}
    o.network_address = data_types.Uint16(network_address)
    if endpoint_identifier ~= nil then
      o.endpoint_identifier = data_types.Uint8(endpoint_identifier)
    end
    if profile_identifier ~= nil then
      o.profile_identifier = data_types.Uint16(profile_identifier)
    end
    if device_identifier ~= nil then
      o.device_identifier = data_types.Uint16(device_identifier)
    end
    if version ~= nil then
      o.version = TlVersion(version)
    end
  setmetatable(o, {
    __index = orig,
    __tostring = orig.pretty_print
  })
  o:set_field_names()
  return o
end

setmetatable(TlEndpointInformationRecord, {__call = TlEndpointInformationRecord.from_values})
return TlEndpointInformationRecord
