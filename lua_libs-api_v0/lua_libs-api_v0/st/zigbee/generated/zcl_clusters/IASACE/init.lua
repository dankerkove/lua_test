local cluster_base = require "st.zigbee.cluster_base"
local IASACEClientAttributes = require "st.zigbee.generated.zcl_clusters.IASACE.client.attributes" 
local IASACEServerAttributes = require "st.zigbee.generated.zcl_clusters.IASACE.server.attributes" 
local IASACEClientCommands = require "st.zigbee.generated.zcl_clusters.IASACE.client.commands"
local IASACEServerCommands = require "st.zigbee.generated.zcl_clusters.IASACE.server.commands"
local IASACETypes = require "st.zigbee.generated.zcl_clusters.IASACE.types"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.IASACE
--- @alias IASACE
---
--- @field public ID number 0x0501 the ID of this cluster
--- @field public NAME string "IASACE" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.IASACEServerAttributes | st.zigbee.zcl.clusters.IASACEClientAttributes
--- @field public commands st.zigbee.zcl.clusters.IASACEServerCommands | st.zigbee.zcl.clusters.IASACEClientCommands
--- @field public types st.zigbee.zcl.clusters.IASACETypes
local IASACE = {}

IASACE.ID = 0x0501
IASACE.NAME = "IASACE"
IASACE.server = {}
IASACE.client = {}
IASACE.server.attributes = IASACEServerAttributes:set_parent_cluster(IASACE) 
IASACE.client.attributes = IASACEClientAttributes:set_parent_cluster(IASACE) 
IASACE.server.commands = IASACEServerCommands:set_parent_cluster(IASACE)
IASACE.client.commands = IASACEClientCommands:set_parent_cluster(IASACE)
IASACE.types = IASACETypes

--- Find an attribute by id
---
--- @param command_id number
function IASACE:get_attribute_by_id(attr_id)
  local attr_id_map = {
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function IASACE:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x00] = "Arm",
    [0x01] = "Bypass",
    [0x02] = "Emergency",
    [0x03] = "Fire",
    [0x04] = "Panic",
    [0x05] = "GetZoneIDMap",
    [0x06] = "GetZoneInformation",
    [0x07] = "GetPanelStatus",
    [0x08] = "GetBypassedZoneList",
    [0x09] = "GetZoneStatus",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function IASACE:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x00] = "ArmResponse",
    [0x01] = "GetZoneIDMapResponse",
    [0x02] = "GetZoneInformationResponse",
    [0x03] = "ZoneStatusChanged",
    [0x04] = "PanelStatusChanged",
    [0x05] = "GetPanelStatusResponse",
    [0x06] = "SetBypassedZoneList",
    [0x07] = "BypassResponse",
    [0x08] = "GetZoneStatusResponse",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

IASACE.attribute_direction_map = {}
IASACE.command_direction_map = {
  ["ArmResponse"] = "client",
  ["GetZoneIDMapResponse"] = "client",
  ["GetZoneInformationResponse"] = "client",
  ["ZoneStatusChanged"] = "client",
  ["PanelStatusChanged"] = "client",
  ["GetPanelStatusResponse"] = "client",
  ["SetBypassedZoneList"] = "client",
  ["BypassResponse"] = "client",
  ["GetZoneStatusResponse"] = "client",
  ["Arm"] = "server",
  ["Bypass"] = "server",
  ["Emergency"] = "server",
  ["Fire"] = "server",
  ["Panic"] = "server",
  ["GetZoneIDMap"] = "server",
  ["GetZoneInformation"] = "server",
  ["GetPanelStatus"] = "server",
  ["GetBypassedZoneList"] = "server",
  ["GetZoneStatus"] = "server",
}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = IASACE.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, IASACE.NAME))
  end
  return IASACE[direction].attributes[key] 
end
IASACE.attributes = {}
setmetatable(IASACE.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = IASACE.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, IASACE.NAME))
  end
  return IASACE[direction].commands[key] 
end
IASACE.commands = {}
setmetatable(IASACE.commands, command_helper_mt)

setmetatable(IASACE, {__index = cluster_base})

return IASACE
