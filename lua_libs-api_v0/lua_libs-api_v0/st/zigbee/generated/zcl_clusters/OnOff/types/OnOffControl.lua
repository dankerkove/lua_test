local data_types = require "st.zigbee.data_types"
local UintABC = require "st.zigbee.data_types.base_defs.UintABC"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.OnOff.types.OnOffControl : Uint8
--- @alias OnOffControl
---
--- @field public byte_length number 1
--- @field public ACCEPT_ONLY_WHEN_ON number 1
local OnOffControl = {}
local new_mt = UintABC.new_mt({NAME = "OnOffControl", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.BASE_MASK           = 0xFF
new_mt.__index.ACCEPT_ONLY_WHEN_ON = 0x01

--- @function OnOffControl:is_accept_only_when_on_set
--- @return boolean True if the value of ACCEPT_ONLY_WHEN_ON is non-zero
new_mt.__index.is_accept_only_when_on_set = function(self)
  return (self.value & self.ACCEPT_ONLY_WHEN_ON) ~= 0
end
 
--- @function OnOffControl:set_accept_only_when_on
--- Set the value of the bit in the ACCEPT_ONLY_WHEN_ON field to 1
new_mt.__index.set_accept_only_when_on = function(self)
  self.value = self.value | self.ACCEPT_ONLY_WHEN_ON
end

--- @function OnOffControl:unset_accept_only_when_on
--- Set the value of the bits in the ACCEPT_ONLY_WHEN_ON field to 0
new_mt.__index.unset_accept_only_when_on = function(self)
  self.value = self.value & (~self.ACCEPT_ONLY_WHEN_ON & self.BASE_MASK)
end

setmetatable(OnOffControl, new_mt)
return OnOffControl
