local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
--- @type SExtensionFieldSetList
--- @alias SExtensionFieldSetListType
local SExtensionFieldSetListType = require "st.zigbee.generated.zcl_clusters.Scenes.types.SExtensionFieldSetList"
--- @type SSceneName
--- @alias SSceneNameType
local SSceneNameType = require "st.zigbee.generated.zcl_clusters.Scenes.types.SSceneName"
--- @type SGroupId
--- @alias SGroupIdType
local SGroupIdType = require "st.zigbee.generated.zcl_clusters.Scenes.types.SGroupId"

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'2cda4a8ebeb3328f48b89dd179d4e8623e7ad8f1'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- Scenes command EnhancedAddScene
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.Scenes.EnhancedAddScene
--- @alias EnhancedAddScene
---
--- @field public ID number 0x40 the ID of this command
--- @field public NAME string "EnhancedAddScene" the name of this command
--- @field public group_id st.zigbee.zcl.clusters.Scenes.types.SGroupId
--- @field public scene_id Uint8
--- @field public transition_time Uint16
--- @field public scene_name st.zigbee.zcl.clusters.Scenes.types.SSceneName
--- @field public extension_field_sets st.zigbee.zcl.clusters.Scenes.types.SExtensionFieldSetList
local EnhancedAddScene = {}
EnhancedAddScene.NAME = "EnhancedAddScene"
EnhancedAddScene.ID = 0x40
EnhancedAddScene.args_def = {
  {
    name = "group_id",
    optional = false,
    data_type = SGroupIdType,
    is_complex = false,
    default = 0x0000,
  },
  {
    name = "scene_id",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    default = 0x00,
  },
  {
    name = "transition_time",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    default = 0x0000,
  },
  {
    name = "scene_name",
    optional = false,
    data_type = SSceneNameType,
    is_complex = false,
    default = "",
  },
  {
    name = "extension_field_sets",
    optional = false,
    data_type = SExtensionFieldSetListType,
    is_complex = false,
  },
}

function EnhancedAddScene:get_fields()
  local fields = {}
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      fields[#fields + 1] = self[v.name]
    end
  end
  return fields
end

EnhancedAddScene.get_length = utils.length_from_fields
EnhancedAddScene.serialize = utils.serialize_from_fields
EnhancedAddScene.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return EnhancedAddScene
function EnhancedAddScene.deserialize(buf)
  local out = {}
  for _, v in ipairs(EnhancedAddScene.args_def) do
    if not v.optional or buf:remain() > 0 then
      out[v.name] = v.data_type.deserialize(buf)
    end
  end
  setmetatable(out, {__index = EnhancedAddScene})
  out:set_field_names()
  return out
end

function EnhancedAddScene:set_field_names()
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      self[v.name].field_name = v.name
    end
  end
end

--- Build a version of this message as if it came from the device
---
--- @param device ZigbeeDevice the device to build the message from
--- @param group_id st.zigbee.zcl.clusters.Scenes.types.SGroupId
--- @param scene_id Uint8
--- @param transition_time Uint16
--- @param scene_name st.zigbee.zcl.clusters.Scenes.types.SSceneName
--- @param extension_field_sets st.zigbee.zcl.clusters.Scenes.types.SExtensionFieldSetList
--- @return ZigbeeMessageRx The full Zigbee message containing this command body
function EnhancedAddScene.build_test_rx(device, group_id, scene_id, transition_time, scene_name, extension_field_sets)
  local out = {}
  local args = {group_id, scene_id, transition_time, scene_name, extension_field_sets}
  for i,v in ipairs(EnhancedAddScene.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {__index = EnhancedAddScene})
  out:set_field_names()
  return EnhancedAddScene._cluster:build_test_rx_cluster_specific_command(device, out, "server")
end

--- Initialize the EnhancedAddScene command
---
--- @param self EnhancedAddScene the template class for this command
--- @param device ZigbeeDevice the device to build this message to
--- @param group_id st.zigbee.zcl.clusters.Scenes.types.SGroupId
--- @param scene_id Uint8
--- @param transition_time Uint16
--- @param scene_name st.zigbee.zcl.clusters.Scenes.types.SSceneName
--- @param extension_field_sets st.zigbee.zcl.clusters.Scenes.types.SExtensionFieldSetList
--- @return ZigbeeMessageTx the full command addressed to the device
function EnhancedAddScene:init(device, group_id, scene_id, transition_time, scene_name, extension_field_sets)
  local out = {}
  local args = {group_id, scene_id, transition_time, scene_name, extension_field_sets}
  if #args > #self.args_def then
    error(self.NAME .. " received too many arguments")
  end
  for i,v in ipairs(self.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {
    __index = EnhancedAddScene,
    __tostring = EnhancedAddScene.pretty_print
  })
  out:set_field_names()
  return self._cluster:build_cluster_specific_command(device, out, "server")
end

function EnhancedAddScene:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(EnhancedAddScene, {__call = EnhancedAddScene.init})

return EnhancedAddScene
