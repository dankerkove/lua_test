-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'aa2e97900114164f8c529a796bf831ed52b6bc41'
-- Protocol definition XML version: 2.3.2

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Battery
--- @alias Battery
---
--- Supported versions: 1
---
--- @field public GET number 0x02 - BATTERY_GET command id
--- @field public REPORT number 0x03 - BATTERY_REPORT command id
local Battery = {}
Battery.GET = 0x02
Battery.REPORT = 0x03

Battery._commands = {
  [Battery.GET] = "GET",
  [Battery.REPORT] = "REPORT"
}

--- Instantiate a versioned instance of the Battery Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Battery versioned command class instance
function Battery:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.BATTERY][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Battery, {
  __call = Battery.init
})

Battery._serialization_version = nil
Battery._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.BATTERY] = {
  [1] = true
}

--- @class st.zwave.CommandClass.Battery.GetV1Args
--- @alias GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.Battery.GetV1:st.zwave.Command
--- @alias GetV1
---
--- v1 BATTERY_GET
---
--- @field public cmd_class number 0x80
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Battery.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BATTERY_GET object.
---
--- @param module st.zwave.CommandClass.Battery command class module instance
--- @param args st.zwave.CommandClass.Battery.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BATTERY, Battery.GET, 1, args, ...)
end

--- Serialize v1 BATTERY_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 BATTERY_GET payload.
---
--- @return st.zwave.CommandClass.Battery.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Battery.GetV1
--- @return st.zwave.CommandClass.Battery.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Battery.GetV1
--- @return st.zwave.CommandClass.Battery.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Battery.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Battery.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Battery.ReportV1Args
--- @alias ReportV1Args
--- @field public battery_level integer see :lua:class:`Battery.battery_level <st.zwave.CommandClass.Battery.battery_level>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Battery.ReportV1:st.zwave.Command
--- @alias ReportV1
---
--- v1 BATTERY_REPORT
---
--- @field public cmd_class number 0x80
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Battery.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BATTERY_REPORT object.
---
--- @param module st.zwave.CommandClass.Battery command class module instance
--- @param args st.zwave.CommandClass.Battery.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BATTERY, Battery.REPORT, 1, args, ...)
end

--- Serialize v1 BATTERY_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.battery_level)
  return writer.buf
end

--- Deserialize a v1 BATTERY_REPORT payload.
---
--- @return st.zwave.CommandClass.Battery.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("battery_level")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Battery.ReportV1
--- @return st.zwave.CommandClass.Battery.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.battery_level = self.args.battery_level or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Battery.ReportV1
--- @return st.zwave.CommandClass.Battery.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Battery.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Battery.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.battery_level = function()
    return zw._reflect(
      Battery._reflect_battery_level,
      args.battery_level
    )
  end
end

--- @class st.zwave.CommandClass.Battery.Get
--- @alias _Get
---
--- Dynamically versioned BATTERY_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x80
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Battery.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BATTERY_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Battery command class module instance
--- @param args st.zwave.CommandClass.Battery.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Battery.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Battery.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Battery.Report
--- @alias _Report
---
--- Dynamically versioned BATTERY_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x80
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Battery.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BATTERY_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Battery command class module instance
--- @param args st.zwave.CommandClass.Battery.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Battery.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Battery.REPORT, module._serialization_version, args, ...)
end

Battery.GetV1 = GetV1
Battery.ReportV1 = ReportV1
Battery.Get = _Get
Battery.Report = _Report

Battery._lut = {
  [0] = { -- dynamically versioned constructors
    [Battery.GET] = Battery.Get,
    [Battery.REPORT] = Battery.Report
  },
  [1] = { -- version 1
    [Battery.GET] = Battery.GetV1,
    [Battery.REPORT] = Battery.ReportV1
  }
}
--- @class st.zwave.CommandClass.Battery.battery_level
--- @alias battery_level
--- @field public BATTERY_LOW_WARNING number 0xFF
local battery_level = {
  BATTERY_LOW_WARNING = 0xFF
}
Battery.battery_level = battery_level
Battery._reflect_battery_level = zw._reflection_builder(Battery.battery_level)


return Battery
