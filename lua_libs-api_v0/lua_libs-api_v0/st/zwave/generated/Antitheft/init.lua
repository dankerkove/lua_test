-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'aa2e97900114164f8c529a796bf831ed52b6bc41'
-- Protocol definition XML version: 2.3.2

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Antitheft
--- @alias Antitheft
---
--- Supported versions: 1,2
---
--- @field public SET number 0x01 - ANTITHEFT_SET command id
--- @field public GET number 0x02 - ANTITHEFT_GET command id
--- @field public REPORT number 0x03 - ANTITHEFT_REPORT command id
local Antitheft = {}
Antitheft.SET = 0x01
Antitheft.GET = 0x02
Antitheft.REPORT = 0x03

Antitheft._commands = {
  [Antitheft.SET] = "SET",
  [Antitheft.GET] = "GET",
  [Antitheft.REPORT] = "REPORT"
}

--- Instantiate a versioned instance of the Antitheft Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Antitheft versioned command class instance
function Antitheft:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.ANTITHEFT][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Antitheft, {
  __call = Antitheft.init
})

Antitheft._serialization_version = nil
Antitheft._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.ANTITHEFT] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.Antitheft.SetV1Args
--- @alias SetV1Args
--- @field public enable boolean
--- @field public magic_code string
--- @field public manufacturer_id integer [0,65535]
--- @field public anti_theft_hint_byte string
local SetV1Args = {}

--- @class st.zwave.CommandClass.Antitheft.SetV1:st.zwave.Command
--- @alias SetV1
---
--- v1 and forward-compatible v2 ANTITHEFT_SET
---
--- @field public cmd_class number 0x5D
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Antitheft.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 ANTITHEFT_SET object.
---
--- @param module st.zwave.CommandClass.Antitheft command class module instance
--- @param args st.zwave.CommandClass.Antitheft.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ANTITHEFT, Antitheft.SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 ANTITHEFT_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, writer.length(args.magic_code))
  writer:write_bool(args.enable)
  writer:write_bytes(args.magic_code)
  writer:write_be_u16(args.manufacturer_id)
  writer:write_u8(writer.length(args.anti_theft_hint_byte))
  writer:write_bytes(args.anti_theft_hint_byte)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 ANTITHEFT_SET payload.
---
--- @return st.zwave.CommandClass.Antitheft.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7, "number_of_magic_code_bytes")
  reader:read_bool("enable")
  reader:read_bytes(reader.parsed.number_of_magic_code_bytes, "magic_code")
  reader:read_be_u16("manufacturer_id")
  reader:read_u8("anti_theft_hint_number_bytes")
  reader:read_bytes(reader.parsed.anti_theft_hint_number_bytes, "anti_theft_hint_byte")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Antitheft.SetV1
--- @return st.zwave.CommandClass.Antitheft.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.enable = self.args.enable or false
  args.magic_code = self.args.magic_code or ""
  args.manufacturer_id = self.args.manufacturer_id or 0
  args.anti_theft_hint_byte = self.args.anti_theft_hint_byte or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Antitheft.SetV1
--- @return st.zwave.CommandClass.Antitheft.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Antitheft.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Antitheft.SetV1
function SetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Antitheft.GetV1Args
--- @alias GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.Antitheft.GetV1:st.zwave.Command
--- @alias GetV1
---
--- v1 and forward-compatible v2 ANTITHEFT_GET
---
--- @field public cmd_class number 0x5D
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Antitheft.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 ANTITHEFT_GET object.
---
--- @param module st.zwave.CommandClass.Antitheft command class module instance
--- @param args st.zwave.CommandClass.Antitheft.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ANTITHEFT, Antitheft.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 ANTITHEFT_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 ANTITHEFT_GET payload.
---
--- @return st.zwave.CommandClass.Antitheft.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Antitheft.GetV1
--- @return st.zwave.CommandClass.Antitheft.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Antitheft.GetV1
--- @return st.zwave.CommandClass.Antitheft.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Antitheft.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Antitheft.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Antitheft.ReportV1Args
--- @alias ReportV1Args
--- @field public anti_theft_protection_status integer [0,255]
--- @field public manufacturer_id integer [0,65535]
--- @field public anti_theft_hint_byte string
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Antitheft.ReportV1:st.zwave.Command
--- @alias ReportV1
---
--- v1 and forward-compatible v2 ANTITHEFT_REPORT
---
--- @field public cmd_class number 0x5D
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Antitheft.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 ANTITHEFT_REPORT object.
---
--- @param module st.zwave.CommandClass.Antitheft command class module instance
--- @param args st.zwave.CommandClass.Antitheft.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ANTITHEFT, Antitheft.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 ANTITHEFT_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.anti_theft_protection_status)
  writer:write_be_u16(args.manufacturer_id)
  writer:write_u8(writer.length(args.anti_theft_hint_byte))
  writer:write_bytes(args.anti_theft_hint_byte)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 ANTITHEFT_REPORT payload.
---
--- @return st.zwave.CommandClass.Antitheft.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("anti_theft_protection_status")
  reader:read_be_u16("manufacturer_id")
  reader:read_u8("anti_theft_hint_number_bytes")
  reader:read_bytes(reader.parsed.anti_theft_hint_number_bytes, "anti_theft_hint_byte")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Antitheft.ReportV1
--- @return st.zwave.CommandClass.Antitheft.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.anti_theft_protection_status = self.args.anti_theft_protection_status or 0
  args.manufacturer_id = self.args.manufacturer_id or 0
  args.anti_theft_hint_byte = self.args.anti_theft_hint_byte or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Antitheft.ReportV1
--- @return st.zwave.CommandClass.Antitheft.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Antitheft.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Antitheft.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Antitheft.Set
--- @alias _Set
---
--- Dynamically versioned ANTITHEFT_SET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x5D
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Antitheft.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ANTITHEFT_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Antitheft command class module instance
--- @param args st.zwave.CommandClass.Antitheft.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Antitheft.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Antitheft.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Antitheft.Get
--- @alias _Get
---
--- Dynamically versioned ANTITHEFT_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x5D
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Antitheft.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ANTITHEFT_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Antitheft command class module instance
--- @param args st.zwave.CommandClass.Antitheft.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Antitheft.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Antitheft.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Antitheft.Report
--- @alias _Report
---
--- Dynamically versioned ANTITHEFT_REPORT
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x5D
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Antitheft.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ANTITHEFT_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Antitheft command class module instance
--- @param args st.zwave.CommandClass.Antitheft.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Antitheft.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Antitheft.REPORT, module._serialization_version, args, ...)
end

Antitheft.SetV1 = SetV1
Antitheft.GetV1 = GetV1
Antitheft.ReportV1 = ReportV1
Antitheft.Set = _Set
Antitheft.Get = _Get
Antitheft.Report = _Report

Antitheft._lut = {
  [0] = { -- dynamically versioned constructors
    [Antitheft.SET] = Antitheft.Set,
    [Antitheft.GET] = Antitheft.Get,
    [Antitheft.REPORT] = Antitheft.Report
  },
  [1] = { -- version 1
    [Antitheft.SET] = Antitheft.SetV1,
    [Antitheft.GET] = Antitheft.GetV1,
    [Antitheft.REPORT] = Antitheft.ReportV1
  },
  [2] = { -- version 2
    [Antitheft.SET] = Antitheft.SetV1,
    [Antitheft.GET] = Antitheft.GetV1,
    [Antitheft.REPORT] = Antitheft.ReportV1
  }
}

return Antitheft
