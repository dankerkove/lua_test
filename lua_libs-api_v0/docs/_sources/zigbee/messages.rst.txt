Zigbee Messages
===============

This module provides a helpful interface to interact with Zigbee messages, both incoming and outgoing,
in a useful way using tables instead of a string of bytes.  At the top level, a message will be either
a :lua:class:`ZigbeeMessageRx <messages.ZigbeeMessageRx>` or :lua:class:`ZigbeeMessageTx <messages.ZigbeeMessageTx>`
but each of those has the more specific implementations of :lua:class:`ZclMessageTx <messages.ZclMessageTx>` and
:lua:class:`ZdoMessageTx <messages.ZdoMessageTx>` or :lua:class:`ZclMessageRx <messages.ZclMessageRx>` and
:lua:class:`ZdoMessageRx <messages.ZdoMessageRx>`.  All of the message types share a common interface that is
also shared among all of their component parts.  Each of these should include implementations of the following methods:

:deserialize: for creating the table from a string of bytes
:get_length: for giving the length in bytes of this object if it were serialized
:pretty_print: for creating a human readable string representing this object
:serialize: for serializing the message frame back into a string of bytes
:from_values: for creating the table object from the component parts instead of parsing from a string. This should also
    be mapped to the metatable __call function for the table so the syntax Object(...) can be used for creation

Below is an example of parsing a byte stream into an Rx message:

.. code-block:: lua

    local zb_messages = require "st.zigbee.messages"
    local on_off_attr_report = "\x00\xAD\xDE\x01\xEF\xBE\x01\x04\x01\x06\x00\xFF\xFE\x06\x00\x00\xFF\x0A\x00\x00\x10\x01"
    local parsed_message = zb_messages.ZigbeeMessageRx.deserialize({}, on_off_attr_report)

    print(parsed_message.zcl_header.cmd.value) -- 10
    print(parsed_message.body.attr_records[1].attr_id.value) -- 0
    print(parsed_message.body.attr_records[1].data.value) -- true

    print(parsed_message:pretty_print())
    -- ZCLMessageRx:
    --    type: 0x00
    --    AddressHeader:
    --        src_addr: 0xDEAD
    --        src_endpoint: 0x01
    --        dest_addr: 0xBEEF
    --        dest_endpoint: 0x01
    --        profile: 0x0104
    --        cluster: 0x0006
    --    lqi: 0xFF
    --    rssi: -2
    --    body_length: 0x0006
    --    ZCLHeader:
    --        frame_ctrl: 0x00
    --        seqno: 0xFF
    --        ZCLCommandId: 0x0A
    --    ReportAttribute:
    --        AttributeRecord:
    --            AttributeId: 0x0000
    --            DataType: 0x10
    --            Boolean: true

And here is an example building a read attribute command Tx message:

.. code-block:: lua

    local zb_messages = require "st.zigbee.messages"
    local read_attribute = require "st.zigbee.zcl.global_commands.read_attribute"
    local zb_const = require "st.zigbee.constants"
    local data_types = require "st.zigbee.data_types"

    local read_body = read_attribute.ReadAttribute({0x0000})
    local zclh = zb_messages.ZclHeader({
      cmd = data_types.ZCLCommandId(read_attribute.ReadAttribute.ID)
    })
    local addrh = zb_messages.AddressHeader(
        zb_const.HUB.ADDR,
        zb_const.HUB.ENDPOINT,
        0xDEAD,
        0x01,
        zb_const.HA_PROFILE_ID,
        0x0006
    )
    local built_message = zb_messages.ZclMessageTx({
      address_header = addrh,
      zcl_header = zclh,
      body = read_body
    })

    print(built_message:pretty_print())
    --  ZCLMessageTx:
    --      Uint16: 0x0000
    --      AddressHeader:
    --          src_addr: 0x0000
    --          src_endpoint: 0x01
    --          dest_addr: 0xDEAD
    --          dest_endpoint: 0x01
    --          profile: 0x0104
    --          cluster: 0x0006
    --      ZCLHeader:
    --          frame_ctrl: 0x00
    --          seqno: 0x00
    --          ZCLCommandId: 0x00
    --      ReadAttribute:
    --          AttributeId: 0x0000
    --

Module documentation
--------------------

.. lua:autoclass:: AddressHeader

.. lua:autoclass:: ZigbeeMessageRx

.. lua:autoclass:: ZigbeeMessageTx

