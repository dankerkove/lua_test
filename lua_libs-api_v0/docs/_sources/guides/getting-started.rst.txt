===============
Getting Started
===============

About
-----

Intro
+++++

SmartThings Edge Device Drivers are the new method for integrating Hub Connected Devices into the SmartThings Platform. The platform represents all devices through our capability model. The driver then translates to and from this unified model into the device-specific network protocol for each device type. For example, when a driver for a light bulb gets an `on` capability command it, will then build and send a message over the network the bulb it drives is connected to. When the driver receives a notification over the network that the bulb has been turned off via some external means, it will send a capability attribute report to inform the platform that the bulb is now off.

The Driver also handles messages from
the device and translates these messages to events (defined in the capabilities model)
so that the proper device status is available to the Platform.

This translation was previously handled in the Cloud using a DTH (Device Type Handler).
With SmartThings Edge Drivers, this translation will now happen locally on the Hub.
This offers a number of benefits including speed, reliability, cost savings, and
new functionality. In order to do this safely and securely with 3rd-party
Integrations, we’ve designed and built an entirely new system.

Will my existing DTHs run on the Hub?
+++++++++++++++++++++++++++++++++++++

No, not as they are written today.

At SmartThings, we recognize the importance of running devices locally and
strive to enable as much local functionality as possible. Years ago, a project
was undertaken to run Groovy code on the Hub. Unfortunately, we discovered that
our Hub could not support running Groovy locally for many reasons including
performance, security, scalability, and cost. We then pivoted how we supported
local devices to a more efficient architecture that could not support the
community and DTH support was removed from the Hub.

SmartThings Edge enables us to realize the vision of running all Hub Connected
Device Integrations, including community-developed Integrations, locally on
the Hub. To achieve this, an entirely new architecture was required. Due to the
new architecture, existing Groovy integrations will not be able to run on the
Hub. We believe the new system will provide a superior user experience and will
scale much better to all future SmartThings Hub products.

What is the new architecture developed for SmartThings Edge?
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

We formulated two key requirements when building our new Device Integration architecture:

#. All Hub Connected devices are run locally

#. Community Code must be supported

To best support our existing Hubs (including our v2 + v3 hubs and all WASH partners),
we had to go back to square one and develop an entirely new architecture.
We ultimately decided to use `Lua <https://www.lua.org/>`_ for our implementation.
Lua is a language that was designed specially for the type of architecture we are
building and is used for many plug-in systems in large, well-known software packages.

Security is our primary concern in IoT. Lua itself is designed to be a secure
sandbox for running 3rd-party code. In addition, we built a second layer of
security for added protection.

In the sections below, we will look at some of the many features our new architecture offers.

Support for pre-existing Lua libraries
**************************************

Lua is a mature scripting language with many libraries available.
We’ve built a system that can leverage as many of these libraries as possible.
To maintain security and ensure compatibility across CPU architectures, SmartThings only supports libraries written in Lua.

Real network sockets
********************

DTHs have traditionally only formally supported HTTP Rest APIs. SmartThings Edge
supports most of the `LuaSocket <http://w3.impa.br/~diego/software/luasocket/>`__\ API,
opening entirely new device integrations. This API supports direct TCP, TLS, and UDP
socket access including UDP Multicast and Broadcast. This enables the use of
protocols such as Websockets, Protocol Buffers, and more.

One driver per integration
**************************

One driver can now be written to support a full Integration including many device types.

Conversely, DTHs required one driver for each device type. For example, a
bridge with bulbs, plugs, motion sensors, buttons, etc. required a separate
driver for each type of device, resulting in message passing complexity and a
lot of duplicated code. With SmartThings Edge, a single driver can handle various
device types.

Robust libraries for Zigbee and Z-Wave
**************************************

To better support Zigbee and Z-Wave devices, we have created libraries that
facilitate communication with these devices, including default handling for
common behavior. Custom handling is also allowed for devices that require it.

Developer Friendly Tooling
**************************

The primary management tools are now the new SmartThhings CLI and Hub-hosted live logging server.

The SmartThings Edge Device Driver
----------------------------------

The Driver describes everything necessary to integrate a device into the
SmartThings Platform.  Once the Driver is created, the CLI can be used to
upload the package, install to a Hub, uninstall from a Hub and to delete the
driver from the platform.  For more information on the Driver format
see :ref:`Package Guide`.

Lua
+++

At the core of the Driver is one or a set of Lua files.  These files are
responsible for handling commands from the rest of SmartThings and for
generating the protocol-specific messages to control devices.  They are also
responsible for decoding messages from devices and generating SmartThings events.

Libraries
+++++++++

Driver Library
**************

The Driver Library is the foundational library of an Edge Device Driver.
It coordinates all standard work necessary for a functioning device.
The two main APIs every driver will use are the new Driver instantiation call
and the run call.

.. code:: lua

    local example_driver =
      Driver("example",
        {
          device_added = device_added,
          device_removed = device_removed,
          capability_handlers = {
          [capabilities.switch.ID] =
          {
            [capabilities.switch.commands.on.NAME] = handle_on,
            [capabilities.switch.commands.off.NAME] = handle_off
          }
        }
      }
    )

    example_driver:run()

The Driver library can also create timers and other useful core
functionality.  See :ref:`Drivers` for more information.

Device Library
**************

The device library provides APIs for emitting events and storing data
for a device. Properties of the device are also available such as the
``device.device_network_id``. See :ref:`Devices`
for more information.

Capability Library
******************

SmartThings Capabilities are exposed to Edge Device Drivers using the
capability library. For more information regarding capabilities see:
`Capabilities
Reference <https://smartthings.developer.samsung.com/docs/api-ref/capabilities.html>`__

In order to handle commands, capability commands are registered with
corresponding handlers in the Driver initialization (see above reference).

To emit events, call ``emit_event`` on the device the event occurred on.

.. code:: lua

    device:emit_event(capabilities.switch.switch.on())

Zigbee Library
**************

This library provides the necessary APIs to handle communications to and
from Zigbee devices. See :ref:`Zigbee driver structures` for more information.

Z-Wave Library
**************

This library provides the necessary APIs to handle communications to and
from Z-Wave devices. TODO: More details

The CLI
-------

The `SmartThings
CLI <https://github.com/SmartThingsCommunity/smartthings-cli>`__ is the
command line tool used to manage SmartThings Edge Device Drivers. The CLI enables
you to easily build packages and upload them the SmartThings Cloud to run on Hubs.

To build and upload a package:

.. code:: bash

    smartthings edge:drivers:package [path_to_dir]

To install a package to a hub:

.. code:: bash

    smartthings edge:drivers:install [ID]

To uninstall a package from a hub:

.. code:: bash

    smartthings edge:drivers:uninstall [ID]

To delete a package from SmartThings:

.. code:: bash

    smartthings edge:drivers:delete [ID]

Live Logging
------------

The live logging feature that was previously available on
graph.api.smartthings.com is now hosted directly by the Hub. Device events and
any print statements made by the driver are included in the live log. Logs may
be filtered or downloaded. The current path is ``http://<hubip>:9495``.

.. image:: ../../images/livelog.png
   :width: 600


Installing the Hello World Example
----------------------------------

1. Clone the repository below to your machine:

.. code:: bash

    git clone git@github.com:SmartThingsCommunity/SmartThingsEdgeDriversBeta.git

2. Change directories into smartthings-edge-docs/examples:

.. code:: bash

    cd SmartThingsEdgeDriversBeta/examples/

3. Build the package and upload it to the SmartThings Cloud:

**Note**: This step assumes you have the `SmartThings
CLI <https://github.com/SmartThingsCommunity/smartthings-cli>`__ working
and authenticated either with the appropriate scopes, or with a PAT Token.

::

    smartthings edge:drivers:package hello-world-package

Upon success you should see a response like this:

::

    ┌────────────────────┬──────────────────────────────────────┐
    │ Type               │ LAN                                  │
    │ Package Key        │ helloworld.example                   │
    │ Driver Id          │ xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx │
    │ Default Profile Id │ xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx │
    │ Name               │ Hello World                          │
    └────────────────────┴──────────────────────────────────────┘

4. Install the device to your Hub. Select the newly created upload
driver and install it to your Hub:

::

    smartthings edge:drivers:install


5. Select the target Hub (in this case **#1**) and press **Enter**:

::

    ┌───┬──────────────────────────────────────┬─────────────────┬─────────────┬──────┐
    │ # │ Device Id                            │ Name            │ Location    │ Room │
    ├───┼──────────────────────────────────────┼─────────────────┼─────────────┼──────┤
    │ 1 │ xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx │ SmartThings Hub │ Staging Env │      │
    └───┴──────────────────────────────────────┴─────────────────┴─────────────┴──────┘
    ? Enter id or index


::

    ? Select one or more drivers to install.
    ❯◉ Hello World helloworld.example (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)

6. Press **space** to fill the circle for the driver you with to install
then press **enter**. Upon success you should see response below.

::

    driver(s) installed to hub "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

#. Add your device within the SmartThings App. Navigate to **Add a
Device** > **Scan Nearby**
