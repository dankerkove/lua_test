.. _first_driver:

=============================
Writing your first Lua driver
=============================

Startup
-------

The Lua sandbox will initially start the file ``init.lua`` from the base
directory of your ``src`` folder. All the other folders and files in the
``src`` directory will be collected, added to the package and sent to
the hub on package install.

Adding required libraries
--------------

Every ``init.lua`` file should begin with ``require`` statements to
import the libraries the driver will use.

.. code:: lua

    local capabilities = require "st.capabilities"
    local Driver = require "st.driver"

These two statements will load the SmartThings provided libraries for
capability support and for driver utility functions. In unison they
provide the core functionality all drivers will need.

Basic Driver initialization
---------------------------

.. code:: lua

    local example_driver =
      Driver("example_driver",
        {
          device_added = device_added,
          device_removed = device_removed,
          capability_handlers = {
          [capabilities.switch.ID] =
          {
            [capabilities.switch.commands.on.NAME] = handle_on,
            [capabilities.switch.commands.off.NAME] = handle_off
          }
        }
      }
    )

The code above creates a Driver object called ``example_driver``.
Upon initialization, it passes a name and a template.  See :ref:`Drivers` for more details.

Capabilities
------------

As part of Driver initialization, a Lua table is populated with the
SmartThings capabilities and their corresponding commands and the
command handlers to call when a command is sent to a device.

Through properly implemented command handlers, this structure is all that
is needed to allow SmartThings Commands to be received by a Driver,
routed to a command handler, and then to the appropriate device
communication to control a device. The device control will
differ based upon the type of device being controlled.

.. code:: lua

    local function handle_on(driver, device, command)
      -- Send command to device
    end

    local function handle_off(driver, device, command)
      -- Send command to device
    end

All of this handles how SmartThings can control a device.  Now let's look at how
to report a device's status back to SmartThings.

A different API is required to generate device statuses (also known as attributes).
Device attributes use the capability library.

In the example below an attribute event is generated from the device
object, resulting in a ``switch.on`` status for the device.

.. code:: lua

    device:emit_event(capabilities.switch.switch.on())

Getting raw data from devices will differ based on the type of
device. For ZigBee and Z-Wave devices, libraries provided by
SmartThings will facilitate receiving these messages **TODO: Link**. For
LAN devices, a socket will be necessary to communicate with the device.
**TODO: See LAN Docs**

For more information regarding capabilities, see :ref:`Capabilities`.

Running the driver
------------------

The driver library has a run function which never returns and runs the
the driver in a pseudo event-driven model. Where the handlers connected
in prior lines get called when events are sent to the driver for
handling. Any code after the run call to the driver library will not be executed
since run() never returns. Once run() is called, your code is only called when
events occur.

::

    example_driver:run()

Putting it all together
-----------------------

Here's an example of a completed basic Driver:

.. code:: lua

    -- init.lua
    local capabilities = require "st.capabilities"
    local Driver = require "st.driver"

    local function handle_on(driver, device, command)
      log.info("Send on command to device")

      -- in most cases this should not be here, it should be
      -- code parsing messages from the device
      device:emit_event(capabilities.switch.switch.on())
    end

    local function handle_off(driver, device, command)
      log.info("Send off command to device")

      -- in most cases this should not be here, it should be
      -- code parsing messages from the device
      device:emit_event(capabilities.switch.switch.off())
    end

    -- Driver library initialization
    local example_driver =
      Driver("example_driver",
        {
          capability_handlers = {
          [capabilities.switch.ID] =
          {
            [capabilities.switch.commands.on.NAME] = handle_on,
            [capabilities.switch.commands.off.NAME] = handle_off
          }
        }
      }
    )

    -- Put other setup code here

    example_driver:run()
